<%-- val methods: mutable.Buffer[RuntimePropertyInfo] --%>

<%-- Imports  --%>
#import(com.sun.xml.bind.v2.model.runtime.RuntimeClassInfo)
#import(com.sun.xml.bind.v2.model.runtime.RuntimeTypeInfoSet)
#import(com.sun.xml.bind.v2.model.runtime.RuntimePropertyInfo)
#import(com.sun.xml.bind.v2.model.core.{PropertyInfo, NonElement, ElementPropertyInfo, AttributePropertyInfo})
#import(com.sun.xml.bind.v2.model.runtime.{RuntimeClassInfo, RuntimeValuePropertyInfo})
#import(scala.collection.mutable)

<%-- Attributes passed in to the template --%>
<%@ val metadata: me.alanfoster.camelry.codegen.model.MetaData %>
<%@ val other: me.alanfoster.camelry.codegen.model.Other  %>

<%--
   Begin Main Template
--%>

${include("GeneratedWarningTemplate.ssp")}

import com.intellij.util.xml.*;
import com.intellij.util.xml.DomElement;
import org.jetbrains.annotations.*;

${include("HeaderTemplate.ssp")}
<%
    // TODO
    val extendClasses =
        if(other.baseClass.nonEmpty) other.baseClass.get.getClazz.getSimpleName :: List("DomElement")
        else List("DomElement")
%>
//@SubTag("${other.xmlName}")
public interface ${other.simpleName} extends ${extendClasses.mkString(", ")}  {
    #for(attribute <- other.attributes)
        #if(attribute.isRequired)
        @Required
        #end
        @NotNull
        GenericAttributeValue<${attribute.getTarget.getType.asInstanceOf[Class[_]].getSimpleName}> get${attribute.getName.capitalize}();
    #end

    #for(element <- other.elements)
        #if(element.isRequired)
        @Required
        #end
        @NotNull
        ${element.ref.iterator.next.asInstanceOf[RuntimeClassInfo].getClazz.getSimpleName} get${element.getName.capitalize}();
    #end

    #if(other.value != null)
        <% val value = other.value %>
        /**
         * Returns the current DomElement value.
         * Originally named as ${value.getName.capitalize}
         */
        ${value.getTarget.getType.asInstanceOf[Class[_]].getSimpleName} getValue();
        /**
         * Sets the current DomElement value.
         * Originally named as ${value.getName.capitalize}
         */
        ${value.getTarget.getType.asInstanceOf[Class[_]].getSimpleName} setValue();
    #end
}