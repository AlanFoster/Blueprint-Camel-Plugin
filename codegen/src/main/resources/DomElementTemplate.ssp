<%-- val methods: mutable.Buffer[RuntimePropertyInfo] --%>

<%-- Imports  --%>
#import(com.sun.xml.bind.v2.model.runtime.RuntimeClassInfo)
#import(com.sun.xml.bind.v2.model.runtime.RuntimeTypeInfoSet)
#import(com.sun.xml.bind.v2.model.runtime.RuntimePropertyInfo)
#import(com.sun.xml.bind.v2.model.core.{PropertyInfo, NonElement, ElementPropertyInfo, AttributePropertyInfo})
#import(com.sun.xml.bind.v2.model.runtime.{RuntimeClassInfo, RuntimeValuePropertyInfo})
#import(scala.collection.mutable)
#import(scala.collection.JavaConversions)
#import(java.lang.reflect.{ParameterizedType, Type})

<%-- Attributes passed in to the template --%>
<%@ val generatorName: String %>
<%@ val metadata: me.alanfoster.camelry.codegen.model.Metadata %>
<%@ val beanInfo: me.alanfoster.camelry.codegen.model.BeanInfo  %>

<%--
   Begin Main Template
--%>

${include("GeneratedWarningTemplate.ssp")}
package ${metadata.packageName}

import com.intellij.util.xml.*;
import com.intellij.util.xml.DomElement;
import org.jetbrains.annotations.*;
import java.util.List;

${include("HeaderTemplate.ssp")}
<%
    // TODO
    val extendClasses =
        if(beanInfo.baseClass.nonEmpty) beanInfo.baseClass.get.getClazz.getSimpleName :: List("DomElement")
        else List("DomElement")
%>
//@SubTag("${beanInfo.xmlName}")
public interface ${beanInfo.simpleName} extends ${extendClasses.mkString(", ")}  {
    #for(attribute <- beanInfo.attributes)
        #if(attribute.isRequired)
        @Required
        #end
        @NotNull
        GenericAttributeValue<${attribute.getTarget.getType.asInstanceOf[Class[_]].getSimpleName}> get${attribute.getName.capitalize}();
    #end

    #for(element <- beanInfo.elements)
        #if(element.isRequired)
        @Required
        #end
        <%-- TODO Investigate the scenario of multiple refs, does this overlap with elementRefs? --%>
        #for(ref <- element.ref)
            <%
                val dataType =
                    if(ref.isInstanceOf[RuntimeClassInfo]) ref.asInstanceOf[RuntimeClassInfo].getClass.getSimpleName
                    else "TODO"
                val name = element.getName.capitalize
            %>
            @NotNull
            #if(element.isCollection)
            List<${dataType}> get${name}s();
            #else
            ${dataType} get${name}();
            #end
        #end
    #end


    #for(elementRef <- beanInfo.elementRefs)
    <%
        // Create separated list of all XmlReferences, splitting by an indented new line
        val subTags = elementRef.references
                        .map("\"" + _ + "\"").grouped(5).map(_.mkString(", "))
                        .mkString("\n\t\t\t\t\t\t")

        val name = elementRef.name.capitalize
    %>

        @SubTagsList(${subTags})
        ${elementRef.dataType} getComposite${name}();
    #end

    #if(beanInfo.value != null)
        <% val value = beanInfo.value %>
        /**
         * Returns the current DomElement value.
         * Originally named as ${value.getName.capitalize}
         */
        @Required
        @NotNull
        ${value.getTarget.getType.asInstanceOf[Class[_]].getSimpleName} getValue();
        /**
         * Sets the current DomElement value.
         * Originally named as ${value.getName.capitalize}
         */
        ${value.getTarget.getType.asInstanceOf[Class[_]].getSimpleName} setValue();
    #end
}