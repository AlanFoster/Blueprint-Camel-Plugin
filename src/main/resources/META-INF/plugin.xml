<idea-plugin version="2">
    <id>me.alanfoster.intellij.camel</id>
    <name>Blueprint And Camel Support</name>
    <version>0.1</version>
    <vendor url="http://www.alanfoster.me/">Alan Foster</vendor>

    <description><![CDATA[
        <p>An IntelliJ plugin to make both Apache Blueprint and Apache Camel development work easier.</p>
        <p>For further details see <a href="https://github.com/AlanFoster/Blueprint-Camel-Plugin"/>Github Project</a></p>
        ]]>
    </description>


    <change-notes><![CDATA[
        <p>For further details see <a href="https://github.com/AlanFoster/Blueprint-Camel-Plugin"/>Github Project</a>
    ]]>
    </change-notes>

    <!-- please see http://confluence.jetbrains.net/display/IDEADEV/Build+Number+Ranges for description -->
    <idea-version since-build="107.105"/>

    <!-- please see http://confluence.jetbrains.net/display/IDEADEV/Plugin+Compatibility+with+IntelliJ+Platform+Products
         on how to target different products -->
    <!-- uncomment to enable plugin in all products
    <depends>com.intellij.modules.lang</depends>
    -->

    <application-components>
        <!-- Add your application components here -->
    </application-components>

    <project-components>
        <!-- Add your project components here -->
    </project-components>

    <actions>
        <!--
            Creates an item on the context menu to allow the user
            to create a new Camel related file
        -->
        <action id="Camel.CreateBlueprintXmlFile"
                class="me.alanfoster.intellij.camel.tooling.dsl.dom.CreateCamelFile"
                text="Camel Blueprint"
                description="Creates a Blueprint Camel File"
                icon="/me/alanfoster/intellij/icons/camel_16x16.png"
                >
            <add-to-group group-id="NewGroup" anchor="last"/>
        </action>
    </actions>

    <!-- TODO investigate xml.elementDescriptorProvider  -->

    <extensions defaultExtensionNs="com.intellij">
        <fileTypeFactory implementation="me.alanfoster.intellij.camel.simple.file.SimpleFileTypeFactory"/>
        <lang.parserDefinition language="Simple"
                               implementationClass="me.alanfoster.intellij.camel.simple.language.parser.SimpleParserDefinition"/>
        <!--
            Tooling
        -->

        <!-- Simple Language Related -->
        <completion.contributor language="Simple"
                                implementationClass="me.alanfoster.intellij.camel.simple.language.tooling.autocomplete.SimpleCompletitionContributor"/>
        <lang.syntaxHighlighterFactory key="Simple"
                                       implementationClass="me.alanfoster.intellij.camel.simple.language.tooling.highlighter.SimpleSyntaxHighlighterFactory"/>

        <!-- Blueprint/Spring Related -->
        <languageInjector
                implementation="me.alanfoster.intellij.camel.tooling.languageinjector.CamelLanguageInjector"/>

        <!-- A contributor will resolve references for us, allowing us to pair elements together
             This means we can provide automatic completion/renaming etc -->
        <!--        <psi.referenceContributor implementation="me.alanfoster.intellij.camel.tooling.dsl.xml.BeanReferenceContributor"/>-->

        <!--<lang.refactoringSupport language="Simple" implementationClass="me.alanfoster.intellij.camel.tooling.dsl.xml.RefactorTest"/>
-->


        <!--
            Register the Blueprint DOM file description
        -->
        <dom.fileDescription implementation="me.alanfoster.intellij.blueprint.dom.BlueprintFileDescription"/>

        <!--
            Provides a fileTemplateGroup, which allows you to rightclick the navigation area and create
            a new generic blueprint/camel file
        -->
        <fileTemplateGroup implementation="me.alanfoster.intellij.blueprint.dom.BlueprintFileTemplateManager"/>

        <!--
            Creates gutter icons, which can be clicked to link to a referenced element
        -->
        <codeInsight.lineMarkerProvider language="XML"
                                        implementationClass="me.alanfoster.intellij.camel.tooling.dsl.dom.BeanLineMarkerProvider"/>

        <!--
            Register the bean Annotator which will highlight a reference id as wrong if it can't find it
			Or say mark it matching a bean, and provide a text annotation when hovered over
        -->
        <!--        <annotator language="XML" implementationClass="me.alanfoster.intellij.camel.tooling.dsl.xml.BeanAnnotator"/>-->


        <!--
            Register a gotoDeclarationHandler which allows for ctrl+clicking tokens to go to a declaration
        -->
        <!--        <gotoDeclarationHandler
                        implementation="me.alanfoster.intellij.camel.tooling.dsl.xml.BeanGotoDeclarationHandler"/>
        -->


        <!--
            Blueprint inspection elements
        -->

        <!-- Basic checker for Required, duplicate names etc -->
        <localInspection language="XML" enabledByDefault="true" level="ERROR"
                         groupName="Blueprint and Camel Support" displayName="Blueprint File Validation"
                         implementationClass="me.alanfoster.intellij.blueprint.inspectors.BlueprintDOMInspection"/>

        <!-- Custom checker for Deprecated elements which are no longer supported by camel -->
        <localInspection language="XML" enabledByDefault="true" level="WARNING"
                         groupName="Blueprint and Camel Support" displayName="Deprecated Attributes"
                         implementationClass="me.alanfoster.intellij.blueprint.inspectors.DeprecatedAttribtueChecker"/>

        <dom.customAnnotationChecker
                implementation="me.alanfoster.intellij.blueprint.inspectors.BlueprintBeanRefExtendsChecker" />

        <!-- Blueprint Injection Language -->

        <lang.parserDefinition language="BlueprintInjectionLanguage" implementationClass="me.alanfoster.intellij.blueprint.language.InjectionParserDefinition" />

        <languageInjector implementation="me.alanfoster.intellij.blueprint.language.injector.BlueprintInjectionLanguageInjector" />

        <fileTypeFactory implementation="me.alanfoster.intellij.blueprint.language.file.InjectionFileTypeFactory"/>


        <psi.referenceContributor
                implementation="me.alanfoster.intellij.blueprint.language.contributors.InjectionPsiReferenceContributor" />

        <!--        <completion.contributor
                        language="BlueprintInjectionLanguage"
                        implementationClass="me.alanfoster.intellij.blueprint.language.InjectionReferenceContributor" />-->


        <!-- See http://confluence.jetbrains.com/display/IDEADEV/IntelliJ+IDEA+Plugin+Structure about services -->
        <applicationService
                serviceInterface="me.alanfoster.intellij.blueprint.model.IBlueprintManager"
                serviceImplementation="me.alanfoster.intellij.blueprint.model.BlueprintManager"/>

        <!--
            Register the  Karaf Features File DOM file description
            Which will wire up all of the magic for a karaf features file
        -->
        <dom.fileDescription implementation="me.alanfoster.intellij.karaf.dom.KarafFeaturesFileDescription"/>

        <!-- Basic checker for Required, duplicate names etc -->
        <localInspection language="XML" enabledByDefault="true" level="ERROR"
                         groupName="Blueprint and Camel Support" displayName="Karaf Feature File Validation"
                         implementationClass="me.alanfoster.intellij.karaf.dom.KarafDomValidation"/>
    </extensions>
</idea-plugin>