/*
 * The BNF Grammar for Apache Camel's Simple notation
 * @See https://github.com/JetBrains/Grammar-Kit

 */

// Notes
// Not currently supported
// String interpolation
// - "Hello ${in.header.name} this is ${in.header.me} speaking"
// - Elvis operator "${foo?.bar?.baz}"


{
  parserClass="me.alanfoster.camelus.camel.simple.language.parser.SimpleParser"
  StubParserClass="me.alanfoster.cameluscamel.simple.parser.GeneratedParserUtilBase"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Simple"
  psiImplClassSuffix="Impl"
  psiPackage="me.alanfoster.camelus.camel.simple.language.psi"
  psiImplPackage="me.alanfoster.camelus.camel.simple.language.impl"

  elementTypeHolderClass="me.alanfoster.camelus.camel.simple.language.psi.SimpleTypes"
  elementTypeClass="me.alanfoster.camelus.camel.simple.language.psi.SimpleElementType"
  tokenTypeClass="me.alanfoster.camelus.camel.simple.language.psi.SimpleTokenType"
}


simpleFile ::= item_*

private item_ ::=
     simple
    | non_simple
    | CRLF

// Non-Simple, ie anything goes
// TODO is there a '.' notation to match all?
non_simple ::= (SINGLE_CHARACTER | NUMBER | APOSTROPHE)+

// Simple functions - Always preceded with the function start operator - in this case only '${' is supported
simple ::=
        equality_expression
        | string_expression
        | relational_expression
        | simple_expression

// Expressions
equality_expression ::= simple_expression equality_operator right_hand_side
relational_expression ::= simple_expression relational_operator right_hand_side
string_expression ::= simple_expression string_operator right_hand_side

right_hand_side ::= simple_expression | literal

simple_expression ::= FUNCTION_START simple_expression_body FUNCTION_END

simple_expression_body ::= identifier (member_access)*
member_access ::= LEFTSQUARE member_access_key RIGHTSQUARE
        | DOT identifier
member_access_key ::=
    "last" | "last" MINUS number
    identifier | string_literal | numeric_literal

// Operators
equality_operator ::= NOT_EQUALS | EQUALS_EQUALS

string_operator ::=
    CONTAINS_NOT | CONTAINS
    | REGEX_NOT | REGEX
    | NOT_IN | IN
    | NOT_IS | IS
    | NOT_RANGE | RANGE

relational_operator ::= GREATER_OR_EQUAL | GREATER | LESS_OR_EQUAL | LESS

math_operator ::= PLUS | MINUS | MULTIPLY | DIVIDE

identifier ::= SINGLE_CHARACTER (SINGLE_CHARACTER | NUMBER)*

// Literals
literal ::= numeric_literal | string_literal | boolean_literal
numeric_literal ::= NUMBER
string_literal ::=
    SPEECHMARK single_string_characters SPEECHMARK
    | APOSTROPHE single_string_characters APOSTROPHE

boolean_literal ::= TRUE | FALSE

// Note, single_string_characters should be /[^']+/
// TODO Should our lexer give us this instead of the parser?
single_string_characters ::= (SINGLE_CHARACTER | NUMBER)*
